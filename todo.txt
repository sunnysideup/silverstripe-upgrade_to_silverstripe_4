1. each actual update task becomes its own class

2. set up base class and interface for task

3. make a set of tasks to run, remove methods that run particular task
   - setComposerEnvironmentVars
   - setIncludeReorganiseTask
   - setIncludeWebRootUpdateTask

4. separate PHP2CommandLine code into separate module
   - when run through HTTP / BROWSER it shows code on screen and does NOT run
   - when run through CLI it runs immediately.

5. add interface for Task with one method: run($moduleDataObject, $params)

6. create parent task class that does all of the common things for each step (e.g. initiate and close) - MetaUpgraderTask

7. create classes that extend MetaUpgraderTask that do specific stuff

8. refactor MetaUpgrader to be able to load a sequence of tasks.  There is a default list of tasks (as per the current run method)
   but you can also set your own list if you need to.

9. keep startFrom and endWith as these are nice shortcuts.

10. add namespaces as follows: SunnysideUp\UpgradeToSilverstripe4\SubFolder\Of\Src, e.g. SunnysideUp\UpgradeToSilverstripe4\Tasks



- 

with each module, we can add

1. add file to MASTER:
.upgrade.patch.yml

2. we add this file --- 

3:
  "public function includeInHTML($templateFile, $content)": "public function includeInHTML($content)"
  "return parent::includeInHTML($templateFile, $content);": "return parent::includeInHTML($content);"

4. as part of the metauprader: write a task that replaces basic strings.




